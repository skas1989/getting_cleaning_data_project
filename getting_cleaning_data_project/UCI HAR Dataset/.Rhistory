x$setInverse(i)
x$getInverse()
}
a <- diag(x=8, 20, 20)
a
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix())
{
i <- NULL
setMatrix <- function(y)
{
x <<- y
i <<- NULL
}
getMatrix <- function()
{
x
}
setInverse <- function(inverse)
{
i <<- inverse
}
getInverse <- function()
{
i
}
list(setMatrix = setMatrix, getMatrix = getMatrix,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...)  ## Return a matrix that is the inverse of 'x'
{
i <- x$getInverse()
if(!is.null(i))
{
message("getting cached data")
return(i)
}
data <- x$getMatrix()
i <- solve(data)
x$setInverse(i)
x$getInverse()
}
a <- diag(x=22, 50,50)
a
specialMatrix <- makeCacheMatrix(a)
cacheSolve(specialMatrix)
cacheSolve(specialMatrix)
b <- diag(x=2, 5, 5)
b
specialMatrix2 <- makeCacheMatrix(b)
cacheSolve(specialMatrix2)
specialMatrix2 <- makeCacheMatrix(b)
cacheSolve(specialMatrix)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix())
{
i <- NULL
setMatrix <- function(y)
{
x <<- y
i <<- NULL
}
getMatrix <- function()
{
y
}
setInverse <- function(inverse)
{
i <<- inverse
}
getInverse <- function()
{
i
}
list(setMatrix = setMatrix, getMatrix = getMatrix,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...)  ## Return a matrix that is the inverse of 'x'
{
i <- x$getInverse()
if(!is.null(i))
{
message("getting cached data")
return(i)
}
data <- x$getMatrix()
i <- solve(data)
x$setInverse(i)
x$getInverse()
}
a <- diag(x=2, 5, 5)
a
specialMatrix <- makeCacheMatrix(a)
cacheSolve(specialMatrix)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix())
{
i <- NULL
#  setMatrix <- function(y)
#    {
#    x <<- y
#    i <<- NULL
#    }
getMatrix <- function()
{
x
}
setInverse <- function(inverse)
{
i <<- inverse
}
getInverse <- function()
{
i
}
list(setMatrix = setMatrix, getMatrix = getMatrix,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...)  ## Return a matrix that is the inverse of 'x'
{
i <- x$getInverse()
if(!is.null(i))
{
message("getting cached data")
return(i)
}
data <- x$getMatrix()
i <- solve(data)
x$setInverse(i)
x$getInverse()
}
cacheSolve(specialMatrix)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix())
{
i <- NULL
#  setMatrix <- function(y)
#    {
#    x <<- y
#    i <<- NULL
#    }
getMatrix <- function()
{
x
}
setInverse <- function(inverse)
{
i <<- inverse
}
getInverse <- function()
{
i
}
list(setMatrix = setMatrix, getMatrix = getMatrix,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...)  ## Return a matrix that is the inverse of 'x'
{
i <- x$getInverse()
if(!is.null(i))
{
message("getting cached data")
return(i)
}
data <- x$getMatrix()
i <- solve(data)
x$setInverse(i)
x$getInverse()
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix())
{
i <- NULL
#  setMatrix <- function(y)
#    {
#    x <<- y
#    i <<- NULL
#    }
getMatrix <- function()
{
x
}
setInverse <- function(inverse)
{
i <<- inverse
}
getInverse <- function()
{
i
}
list(setMatrix = setMatrix, getMatrix = getMatrix,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...)  ## Return a matrix that is the inverse of 'x'
{
i <- x$getInverse()
if(!is.null(i))
{
message("getting cached data")
return(i)
}
data <- x$getMatrix()
i <- solve(data)
x$setInverse(i)
x$getInverse()
}
a <- diag(x=2, 4, 4)
a
specialM <- makeCacheMatrix(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix())
{
i <- NULL
#  setMatrix <- function(y)
#    {
#    x <<- y
#    i <<- NULL
#    }
getMatrix <- function()
{
x
}
setInverse <- function(inverse)
{
i <<- inverse
}
getInverse <- function()
{
i
}
list(getMatrix = getMatrix,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...)  ## Return a matrix that is the inverse of 'x'
{
i <- x$getInverse()
if(!is.null(i))
{
message("getting cached data")
return(i)
}
data <- x$getMatrix()
i <- solve(data)
x$setInverse(i)
x$getInverse()
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix())
{
i <- NULL
#  setMatrix <- function(y)
#    {
#    x <<- y
#    i <<- NULL
#    }
getMatrix <- function()
{
x
}
setInverse <- function(inverse)
{
i <<- inverse
}
getInverse <- function()
{
i
}
list(getMatrix = getMatrix,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...)  ## Return a matrix that is the inverse of 'x'
{
i <- x$getInverse()
if(!is.null(i))
{
message("getting cached data")
return(i)
}
data <- x$getMatrix()
i <- solve(data)
x$setInverse(i)
x$getInverse()
}
a <- diag(x=1, 4, 4)
a
SM <- makeCacheMatrix(a)
cacheSolve(SM)
b <- diag(5,3)
b
SM1 <- makeCacheMatrix(b)
cacheSolve(SM1)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix())
{
i <- NULL
setMatrix <- function(y)
{
x <<- y
i <<- NULL
}
getMatrix <- function()
{
x
}
setInverse <- function(inverse)
{
i <<- inverse
}
getInverse <- function()
{
i
}
list(setMatrix= setMatrix, getMatrix = getMatrix,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...)  ## Return a matrix that is the inverse of 'x'
{
i <- x$getInverse()
if(!is.null(i))
{
message("getting cached data")
return(i)
}
data <- x$getMatrix()
i <- solve(data)
x$setInverse(i)
x$getInverse()
}
a <- diag(x=2, 10,10)
a
makeCacheMatrix(a)
makeCacheMatrix(a)
SM <- makeCacheMatrix(a)
sm
SM
cacheSolve(SM)
cacheSolve(SM)
library(datasets)
iris
iris[,1]
iris[1,1]
iris[,2]
iris[[,2]]
iris[[1,2]]
iris[1,2]
row.names(iris)
list(1,2,3,4,5)
list
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix())
{
i <- NULL
setMatrix <- function(y)
{
x <<- y
i <<- NULL
}
getMatrix <- function()
{
x
}
setInverse <- function(inverse)
{
i <<- inverse
}
getInverse <- function()
{
i
}
list(setMatrix = setMatrix, getMatrix = getMatrix,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...)  ## Return a matrix that is the inverse of 'x'
{
i <- x$getInverse()
if(!is.null(i))
{
message("getting cached data")
return(i)
}
data <- x$getMatrix()
i <- solve(data)
x$setInverse(i)
x$getInverse()
}
a <- diag(1,2,3)
a
a <- diag(1,2,2)
a
sm <- makeCacheMatrix(a)
sm
x <- matrix(rnorm(200), 20, 10)
x
x
apply(x, 1, quantile, probs = c(0.25, 0.75))
apply(x, 1, range)
apply(x, 1, mean)
#Reading in the features datatable for both "test" and "train" cases.
features_test_DT <- read.table("test/X_test.txt")
features_train_DT <- read.table("train/X_train.txt")
#Assigning appropriate variable names to the features datatable for both "test" and "train" cases.
features_colnames<- read.table("features.txt")
features_variables <- features_colnames$V2
colnames(features_test_DT) <- features_variables
colnames(features_train_DT) <- features_variables
#Extracting only the measurements on the mean and standard deviation for each measurement.
bool1 <- grepl("mean()", features_variables)
bool2 <- grepl("std()", features_variables)
bool <- bool1 | bool2
features_variables_extract <- features_variables[bool]
bool3 <- grepl("meanFreq()", features_variables_extract)
features_variables_extract <- features_variables_extract[!bool3]
features_test_DT_use <- features_test_DT[features_variables_extract]
features_train_DT_use <- features_train_DT[features_variables_extract]
#Merging the relevant parts of the training and the test sets to create one data set.
HAR_DS <- data.frame()
performerID_test <- read.table("test/subject_test.txt")
activityID_test <- read.table("test/y_test.txt")
performerID_train <- read.table("train/subject_train.txt")
activityID_train <- read.table("train/y_train.txt")
HAR_test <- data.frame("performerID"=performerID_test, "activityID"=activityID_test)
colnames(HAR_test) <- c("PerformerID", "ActivityID")
HAR_test <- cbind(HAR_test, features_test_DT_use)
HAR_train <- data.frame("performerID"=performerID_train, "activityID"=activityID_train)
colnames(HAR_train) <- c("PerformerID", "ActivityID")
HAR_train <- cbind(HAR_train, features_train_DT_use)
HAR_DS <- rbind(HAR_DS, HAR_train)
HAR_DS <- rbind(HAR_DS, HAR_test)
#Uses descriptive activity names to name the activities in the data set
HAR_DS$ActivityID <- as.character(HAR_DS$ActivityID)
HAR_DS$ActivityID[HAR_DS$ActivityID == "1"] <- "WALKING"
HAR_DS$ActivityID[HAR_DS$ActivityID == "2"] <- "WALKING_UPSTAIRS"
AR_DS$ActivityID[HAR_DS$ActivityID == "3"] <- "WALKING_DOWNSTAIRS"
HAR_DS$ActivityID[HAR_DS$ActivityID == "4"] <- "SITTING"
HAR_DS$ActivityID[HAR_DS$ActivityID == "5"] <- "STANDING"
HAR_DS$ActivityID[HAR_DS$ActivityID == "6"] <- "LAYING"
setwd("C:/Users/Kumail/OneDrive/Latest docos/Coursera/getting and cleaning data/project/getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset")
#Reading in the features datatable for both "test" and "train" cases.
features_test_DT <- read.table("test/X_test.txt")
features_train_DT <- read.table("train/X_train.txt")
#Assigning appropriate variable names to the features datatable for both "test" and "train" cases.
features_colnames<- read.table("features.txt")
features_variables <- features_colnames$V2
colnames(features_test_DT) <- features_variables
colnames(features_train_DT) <- features_variables
#Extracting only the measurements on the mean and standard deviation for each measurement.
bool1 <- grepl("mean()", features_variables)
bool2 <- grepl("std()", features_variables)
bool <- bool1 | bool2
features_variables_extract <- features_variables[bool]
bool3 <- grepl("meanFreq()", features_variables_extract)
features_variables_extract <- features_variables_extract[!bool3]
features_test_DT_use <- features_test_DT[features_variables_extract]
features_train_DT_use <- features_train_DT[features_variables_extract]
#Merging the relevant parts of the training and the test sets to create one data set.
HAR_DS <- data.frame()
performerID_test <- read.table("test/subject_test.txt")
activityID_test <- read.table("test/y_test.txt")
performerID_train <- read.table("train/subject_train.txt")
activityID_train <- read.table("train/y_train.txt")
HAR_test <- data.frame("performerID"=performerID_test, "activityID"=activityID_test)
colnames(HAR_test) <- c("PerformerID", "ActivityID")
HAR_test <- cbind(HAR_test, features_test_DT_use)
HAR_train <- data.frame("performerID"=performerID_train, "activityID"=activityID_train)
colnames(HAR_train) <- c("PerformerID", "ActivityID")
HAR_train <- cbind(HAR_train, features_train_DT_use)
HAR_DS <- rbind(HAR_DS, HAR_train)
HAR_DS <- rbind(HAR_DS, HAR_test)
#Uses descriptive activity names to name the activities in the data set
HAR_DS$ActivityID <- as.character(HAR_DS$ActivityID)
HAR_DS$ActivityID[HAR_DS$ActivityID == "1"] <- "WALKING"
HAR_DS$ActivityID[HAR_DS$ActivityID == "2"] <- "WALKING_UPSTAIRS"
AR_DS$ActivityID[HAR_DS$ActivityID == "3"] <- "WALKING_DOWNSTAIRS"
HAR_DS$ActivityID[HAR_DS$ActivityID == "4"] <- "SITTING"
HAR_DS$ActivityID[HAR_DS$ActivityID == "5"] <- "STANDING"
HAR_DS$ActivityID[HAR_DS$ActivityID == "6"] <- "LAYING"
